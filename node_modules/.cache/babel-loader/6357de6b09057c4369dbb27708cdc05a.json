{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rrams\\\\workspace\\\\es6-ArrowFunctions\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));\nvar numbers = [3, 56, 2, 48, 5]; // const newNumbers = numbers.map(x => x * x);  //inline function with one parameter, if two or more params then you need them in ()\n//Map -Create a new array by doing something with each item in an array.\n// const newNumbers = numbers.map(x => x * 2);\n// console.log(newNumbers);\n////Filter - Create a new array by keeping the items that return true.\n// const newNumbers = numbers.filter(num => num < 10);\n// console.log(newNumbers);\n//Reduce - Accumulate a value by doing something to each item in an array.\n// var newNumber = numbers.reduce((accumulator, currentNumber) => accumulator + currentNumber);\n// console.log(newNumber);\n////Find - find the first item that matches from an array.\n// const newNumber = numbers.find(num => num > 10);\n// console.log(newNumber);\n////FindIndex - find the index of the first item that matches.\n// const newNumber = numbers.findIndex(function (num) {   //original function\n//   return num > 10;\n// })\n\nvar newNumber = numbers.findIndex(function (num) {\n  return num > 10;\n}); //rewritten function inline with one param\n\nconsole.log(newNumber);","map":{"version":3,"names":["React","ReactDOM","App","render","document","getElementById","numbers","newNumber","findIndex","num","console","log"],"sources":["C:/Users/rrams/workspace/es6-ArrowFunctions/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nvar numbers = [3, 56, 2, 48, 5];\n\n// const newNumbers = numbers.map(x => x * x);  //inline function with one parameter, if two or more params then you need them in ()\n\n//Map -Create a new array by doing something with each item in an array.\n// const newNumbers = numbers.map(x => x * 2);\n// console.log(newNumbers);\n\n////Filter - Create a new array by keeping the items that return true.\n// const newNumbers = numbers.filter(num => num < 10);\n// console.log(newNumbers);\n\n//Reduce - Accumulate a value by doing something to each item in an array.\n// var newNumber = numbers.reduce((accumulator, currentNumber) => accumulator + currentNumber);\n// console.log(newNumber);\n\n////Find - find the first item that matches from an array.\n// const newNumber = numbers.find(num => num > 10);\n// console.log(newNumber);\n\n////FindIndex - find the index of the first item that matches.\n// const newNumber = numbers.findIndex(function (num) {   //original function\n//   return num > 10;\n// })\n\nconst newNumber = numbers.findIndex(num => num > 10);  //rewritten function inline with one param\nconsole.log(newNumber);"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AAEAD,QAAQ,CAACE,MAAT,eAAgB,oBAAC,GAAD;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB;AAEA,IAAIC,OAAO,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,EAAX,EAAe,CAAf,CAAd,C,CAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,IAAMC,SAAS,GAAGD,OAAO,CAACE,SAAR,CAAkB,UAAAC,GAAG;EAAA,OAAIA,GAAG,GAAG,EAAV;AAAA,CAArB,CAAlB,C,CAAuD;;AACvDC,OAAO,CAACC,GAAR,CAAYJ,SAAZ"},"metadata":{},"sourceType":"module"}